<Project>
  <PropertyGroup>
    <_TemplatesDirectory>$(MSBuildThisFileDirectory)tools\templates\</_TemplatesDirectory>
    <_DockerDir>$(MSBuildThisFileDirectory)tools\docker\</_DockerDir>
    <_PackagingDir>$(MSBuildThisFileDirectory)tools\packaging\</_PackagingDir>
    <_DebToolDir>$(MSBuildThisFileDirectory)tools\dotnet-deb-tool-consumer\</_DebToolDir>
    <_PlatformSource>$(RepositoryRoot).deps\Signed\Platform\</_PlatformSource>
    <_InstallerSource>$(RepositoryRoot).deps\Installers\</_InstallerSource>
    <_WorkRoot>$(RepositoryRoot).w\</_WorkRoot>
    <_WorkLayoutDir>$(_WorkRoot).l\</_WorkLayoutDir>
    <_WorkOutputDir>$(_WorkRoot).o\</_WorkOutputDir>
    <_DockerRootDirectory>/opt/code/</_DockerRootDirectory>
    <_InstallersOutputDir>$(ArtifactsDir)installers\</_InstallersOutputDir>

    <PlatformInstallerName>aspnetcore-all</PlatformInstallerName>
    <HostingInstallerName>dotnet-hosting</HostingInstallerName>
    <HostingArchiveName>$(HostingInstallerName)-$(PackageVersion)-linux-x64.tar.gz</HostingArchiveName>
    <PlatformDebConfigFile>$(_PackagingDir)platform_debian_config.json</PlatformDebConfigFile>
    <HostingDebConfigFile>$(_PackagingDir)hosting_debian_config.json</HostingDebConfigFile>

    <PublicCoreFeedPrefix>https://dotnetcli.blob.core.windows.net/dotnet</PublicCoreFeedPrefix>
    <CoreFeedPrefix Condition="'$(KOREBUILD_DOTNET_FEED_UNCACHED)'!=''">$(KOREBUILD_DOTNET_FEED_UNCACHED)</CoreFeedPrefix>
    <CoreFeedPrefix Condition="'$(CoreFeedPrefix)'==''">$(PublicCoreFeedPrefix)</CoreFeedPrefix>

    <RuntimeTargzLink>$(CoreFeedPrefix)/Runtime/$(CoreSetupPackageVersion)/dotnet-runtime-$(CoreSetupPackageVersion)-linux-x64.tar.gz</RuntimeTargzLink>
    <PlatformArchivePrefix>$(_PlatformSource)aspnetcore-all-$(PackageVersion)-</PlatformArchivePrefix>
    <PlatformLinuxArchiveFilePath>$(PlatformArchivePrefix)linux-x64.tar.gz</PlatformLinuxArchiveFilePath>
  </PropertyGroup>

  <Target Name="BuildInstallers" DependsOnTargets="GenerateTargzs;GenerateRpms;GenerateDebs;GenerateRelabledInstallers" />

  <Target Name="_EnsureInstallerPrerequisites">
    <MakeDir Directories="$(_InstallersOutputDir)" />

    <!-- Check Docker server OS -->
    <Exec Command="docker version -f &quot;{{.Server.Os}}&quot;" StandardOutputImportance="Normal" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="DockerHostOS" />
    </Exec>

    <Error Text="Docker host must be using Linux containers." Condition="'$(DockerHostOS)' != 'linux'"/>

    <Error
      Text="Linux archive not found. Expected it to exist in $(PlatformLinuxArchiveFilePath)."
      Condition="!Exists('$(PlatformLinuxArchiveFilePath)')" />
  </Target>

  <Target Name="_DownloadInstallers">
    <!-- Download dotnet installers -->
    <MakeDir Directories="$(_InstallerSource)" />
    <!--
      Note: KOREBUILD_DOTNET_FEED_CREDENTIAL is intentionally NOT an MSBuild variable.
      MSBuild doesn't to the substitution correctly because the string contains %,
      so we'll let bash do it instead.
    -->
    <Exec Command="curl --fail -sSL &quot;$(RuntimeTargzLink)$KOREBUILD_DOTNET_FEED_CREDENTIAL&quot; -o $(_InstallerSource)dotnet-runtime-$(CoreSetupPackageVersion)-linux-x64.tar.gz" />
  </Target>

  <Target Name="_GenerateTargz">
  </Target>

  <Target Name="GenerateTargzs" DependsOnTargets="_EnsureInstallerPrerequisites;_DownloadInstallers">
    <ItemGroup>
      <_DependentArchives Include="$(_InstallerSource)dotnet-runtime-$(CoreSetupPackageVersion)-linux-x64.tar.gz" />
    </ItemGroup>

    <!-- Clear working directory -->
    <RemoveDir Directories="$(_WorkRoot)" />
    <MakeDir Directories="$(_WorkRoot)" />

    <!-- Create layout: Aspnet Hosting Bundle -->
    <Exec Command="tar -xzf $(PlatformLinuxArchiveFilePath) -C $(_WorkRoot)" />
    <Exec Command="tar -xzf %(_DependentArchives.Identity) -C $(_WorkRoot)" />

    <!-- Create Aspnet Hosting Bundle tar.gz -->
    <Exec Command="tar -czf $(_InstallersOutputDir)$(HostingArchiveName) -C $(_WorkRoot) ."/>
  </Target>

  <Target Name="_BuildDockerImage">
    <Exec
      Command="docker build --build-arg USER_ID=%24(id -u) -t docker-image-$(Image) $(Image)"
      WorkingDirectory="$(_DockerDir)" />
  </Target>

  <Target Name="_RemoveDockerImage">
    <Exec Command="docker rmi docker-image-$(Image)" />
  </Target>

  <Target Name="_GenerateRpm">
    <!-- Clear working directory -->
    <RemoveDir Directories="$(_WorkRoot)" />
    <MakeDir Directories="$(_WorkRoot)" />

    <!-- Create layout: Extract archive if given -->
    <MakeDir Directories="$(_WorkRoot)package_root\" />
    <Exec Command="tar -xzf $(PlatformArchive) -C $(_WorkRoot)package_root\" Condition="'$(PlatformArchive)'!=''" />

    <!-- Create layout: Place changelog -->
    <Copy
      SourceFiles="$(_PackagingDir)changelog"
      DestinationFiles="$(_WorkRoot)templates/changelog"
      OverwriteReadOnlyFiles="True"
      SkipUnchangedFiles="False"
      UseHardlinksIfPossible="False" />

    <ItemGroup>
      <ChangelogItems Include="DATE" Replacement="$([System.DateTime]::UtcNow.ToString(ddd MMM dd yyyy))" />
      <ChangelogItems Include="MAINTAINER_NAME" Replacement="$(MaintainerName)" />
      <ChangelogItems Include="MAINTAINER_EMAIL" Replacement="$(MaintainerEmail)" />
      <ChangelogItems Include="PACKAGE_VERSION" Replacement="$(RPMVersion)" />
      <ChangelogItems Include="PACKAGE_REVISION" Replacement="$(RPMRevision)" />
    </ItemGroup>

    <!-- Update Date, Maintainer, Version, Revision and Changelog Message -->
    <RepoTasks.ReplaceInFile Filename="$(_WorkRoot)templates/changelog" Items="@(ChangelogItems)" />

    <!-- Update Maintainer and Summary -->
    <PropertyGroup>
      <RPMMaintainer>$(MaintainerName) &lt;$(MaintainerEmail)&gt;</RPMMaintainer>
      <RPMSummary>$(RPMSummary.Replace('DEB_VERSION','$(RPMVersion)'))</RPMSummary>
    </PropertyGroup>

    <!-- Run RPM -->
    <Exec Command="docker run
      --rm
      -v $(RepositoryRoot):$(_DockerRootDirectory)
      docker-image-$(Image)
      fpm
        --verbose
        -s dir
        -t rpm
        -n $(RPMInstallerPrefix)-$(RPMVersion)
        -p $(_DockerRootDirectory)artifacts/installers/$(RPMInstallerPrefix)-$(RPMVersion)-$(RPMFileSuffix)
        -v $(RPMVersion)
        --iteration $(RPMRevision)
        -a amd64
        $(RPMArguments)
        --rpm-changelog $(_DockerRootDirectory).w/templates/changelog
        --rpm-summary &quot;$(RPMSummary)&quot;
        --description &quot;$(RPMDescription)&quot;
        --maintainer &quot;$(RPMMaintainer)&quot;
        --vendor &quot;$(RPMVendor)&quot;
        --license &quot;$(RPMLicense)&quot;
        --url &quot;$(RPMHomepage)&quot;
        $(_DockerRootDirectory).w/package_root/=&quot;$(RPMInstallRoot)&quot;" />
  </Target>

  <Target Name="GenerateRpms" DependsOnTargets="_EnsureInstallerPrerequisites">
     <PropertyGroup>
      <Image>rhel.7</Image>
      <RPMVendor>.NET Foundation</RPMVendor>
      <RHInstallerInstallRoot>/opt/rh/rh-dotnet20/root/usr/lib64/dotnet/</RHInstallerInstallRoot>
      <GenericInstallerInstallRoot>/usr/share/dotnet/</GenericInstallerInstallRoot>
    </PropertyGroup>

    <!-- Build Docker Image -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_BuildDockerImage" Properties="Image=$(Image)" />

    <!-- Common installer parameters -->
    <JsonPeek Query="$.short_description" JsonInputPath="$(PlatformDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_PlatformInstallerSummary" />
    </JsonPeek>
    <JsonPeek Query="$.long_description" JsonInputPath="$(PlatformDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_PlatformDescription" />
    </JsonPeek>
    <JsonPeek Query="$.license.type" JsonInputPath="$(PlatformDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_PlatformLicense" />
    </JsonPeek>
    <JsonPeek Query="$.release.package_revision" JsonInputPath="$(PlatformDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_PlatformPackageRevision" />
    </JsonPeek>
    <JsonPeek Query="$.homepage" JsonInputPath="$(PlatformDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_PlatformHomepage" />
    </JsonPeek>
    <JsonPeek Query="$.maintainer_name" JsonInputPath="$(PlatformDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_PlatformMaintainerName" />
    </JsonPeek>
    <JsonPeek Query="$.maintainer_email" JsonInputPath="$(PlatformDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_PlatformMaintainerEmail" />
    </JsonPeek>
    <JsonPeek Query="$.short_description" JsonInputPath="$(HostingDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_HostingSummary" />
    </JsonPeek>
    <JsonPeek Query="$.long_description" JsonInputPath="$(HostingDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_HostingDescription" />
    </JsonPeek>
    <JsonPeek Query="$.license.type" JsonInputPath="$(HostingDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_HostingLicense" />
    </JsonPeek>
    <JsonPeek Query="$.release.package_revision" JsonInputPath="$(HostingDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_HostingRevision" />
    </JsonPeek>
    <JsonPeek Query="$.homepage" JsonInputPath="$(HostingDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_HostingHomepage" />
    </JsonPeek>
    <JsonPeek Query="$.maintainer_name" JsonInputPath="$(HostingDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_HostingMaintainerName" />
    </JsonPeek>
    <JsonPeek Query="$.maintainer_email" JsonInputPath="$(HostingDebConfigFile)">
      <Output TaskParameter="Result" ItemName="_HostingMaintainerEmail" />
    </JsonPeek>

    <ItemGroup>
      <HostingDependencies Include="$(PlatformInstallerName)-$(PackageVersion)">
        <Version>$(PackageVersion)</Version>
      </HostingDependencies>
      <HostingDependencies Include="dotnet-runtime-$(CoreSetupPackageVersion)">
        <Version>$(CoreSetupPackageVersion)</Version>
      </HostingDependencies>
      <RHPlatformDirectories Include="$(RHInstallerInstallRoot)shared" />
      <GenericPlatformDirectories Include="$(GenericInstallerInstallRoot)shared" />
    </ItemGroup>

    <PropertyGroup>
      <HostingFPMArguments>@(HostingDependencies->' -d &quot;%(Identity) &gt;= %(Version)&quot;', ' ')</HostingFPMArguments>
      <RHPlatformArguments>@(RHPlatformDirectories->' --directories &quot;%(FullPath)&quot;', ' ')</RHPlatformArguments>
      <GenericPlatformArguments>@(GenericPlatformDirectories->' --directories &quot;%(FullPath)&quot;', ' ')</GenericPlatformArguments>

      <CommonArguments>Image=$(Image);RPMVendor=$(RPMVendor);RPMVersion=$(PackageVersion)</CommonArguments>
      <CommonGenericArguments>RPMFileSuffix=rhel.7-x64.rpm;RPMInstallRoot=$(GenericInstallerInstallRoot)</CommonGenericArguments>
      <CommonRHArguments>RPMFileSuffix=rh.rhel.7-x64.rpm;RPMInstallRoot=$(RHInstallerInstallRoot)</CommonRHArguments>

      <CommonPlatformArguments>MaintainerName=@(_PlatformMaintainerName);MaintainerEmail=@(_PlatformMaintainerEmail)</CommonPlatformArguments>
      <CommonPlatformArguments>$(CommonPlatformArguments);RPMInstallerPrefix=$(PlatformInstallerName);RPMRevision=@(_PlatformPackageRevision)</CommonPlatformArguments>
      <CommonPlatformArguments>$(CommonPlatformArguments);RPMSummary=@(_PlatformInstallerSummary);RPMDescription=@(_PlatformDescription)</CommonPlatformArguments>
      <CommonPlatformArguments>$(CommonPlatformArguments);RPMLicense=@(_PlatformLicense);RPMHomepage=@(_PlatformHomepage)</CommonPlatformArguments>
      <CommonPlatformArguments>$(CommonPlatformArguments);PlatformArchive=$(PlatformLinuxArchiveFilePath)</CommonPlatformArguments>

      <CommonHostingArguments>$(CommonArguments);MaintainerName=@(_HostingMaintainerName);MaintainerEmail=@(_HostingMaintainerEmail)</CommonHostingArguments>
      <CommonHostingArguments>$(CommonHostingArguments);RPMInstallerPrefix=$(HostingInstallerName);RPMRevision=@(_HostingRevision)</CommonHostingArguments>
      <CommonHostingArguments>$(CommonHostingArguments);RPMSummary=@(_HostingSummary);RPMDescription=@(_HostingDescription)</CommonHostingArguments>
      <CommonHostingArguments>$(CommonHostingArguments);RPMLicense=@(_HostingLicense);RPMHomepage=@(_HostingHomepage)</CommonHostingArguments>
      <CommonHostingArguments>$(CommonHostingArguments);RPMArguments=$(HostingFPMArguments)</CommonHostingArguments>

      <Platform_RPM_Arguments>$(CommonArguments);$(CommonGenericArguments);$(CommonPlatformArguments);RPMArguments=$(GenericPlatformArguments)</Platform_RPM_Arguments>
      <Hosting_RPM_Arguments>$(CommonArguments);$(CommonGenericArguments);$(CommonHostingArguments)</Hosting_RPM_Arguments>
      <Platform_RPM_RedHat_Arguments>$(CommonArguments);$(CommonRHArguments);$(CommonPlatformArguments);RPMArguments=$(RHPlatformArguments)</Platform_RPM_RedHat_Arguments>
      <Hosting_RPM_RedHat_Arguments>$(CommonArguments);$(CommonRHArguments);$(CommonHostingArguments)</Hosting_RPM_RedHat_Arguments>
    </PropertyGroup>

    <!-- General platform -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GenerateRpm" Properties="$(Platform_RPM_Arguments)" />
    <!-- General hosting bundle -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GenerateRpm" Properties="$(Hosting_RPM_RedHat_Arguments)" />

    <!-- RH platform -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GenerateRpm" Properties="$(Platform_RPM_RedHat_Arguments)" />
    <!-- RH hosting bundle -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GenerateRpm" Properties="$(Hosting_RPM_Arguments)" />

    <!-- Remove Docker Image to save disk space -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_RemoveDockerImage" Properties="Image=$(Image)" />
  </Target>

  <Target Name="RunDebTool">
    <!-- Install dotnet-deb tool -->
    <MSBuild Projects="$(_DebToolDir)dotnet-deb-tool-consumer.csproj" Targets="Restore" />

    <!-- Build deb package -->
    <Exec
      Command="dotnet deb-tool -i $(_WorkLayoutDir) -o $(_WorkOutputDir) -n $(INSTALLER_NAME) -v $(INSTALLER_VERSION)"
      WorkingDirectory="$(_DebToolDir)" />
  </Target>

  <Target Name="_GenerateDeb">
    <!-- Create layout: Clear work directory -->
    <RemoveDir Directories="$(_WorkRoot)" />
    <MakeDir Directories="$(_WorkRoot)" />

    <!-- Create layout: Extract archive if given -->
    <MakeDir Directories="$(_WorkLayoutDir)package_root\" />
    <Exec Command="tar -xzf $(PlatformArchive) -C $(_WorkLayoutDir)package_root/" Condition="'$(PlatformArchive)'!=''" />

    <!-- Create layout: Generate and Place debian_config.json -->
    <Copy
      SourceFiles="$(DebConfig)"
      DestinationFiles="$(_WorkLayoutDir)debian_config.json"
      OverwriteReadOnlyFiles="True"
      SkipUnchangedFiles="False"
      UseHardlinksIfPossible="False" />

    <ItemGroup>
      <DebConfigItems Include="DOTNET_VERSION" Replacement="$(DotnetVersion)" />
      <DebConfigItems Include="DEB_VERSION" Replacement="$(DebVersion)" />
    </ItemGroup>

    <!-- Update versions -->
    <RepoTasks.ReplaceInFile Filename="$(_WorkLayoutDir)debian_config.json" Items="@(DebConfigItems)" />

    <!-- Build Platform and Hosting Bundle Deb package -->

    <!--
      Note: KOREBUILD_DOTNET_FEED_CREDENTIAL is intentionally NOT an MSBuild variable.
      MSBuild doesn't to the substitution correctly because the string contains %,
      so we'll let bash do it instead.
    -->

    <Exec Command="docker run
      --rm
      -v $(RepositoryRoot):$(_DockerRootDirectory)
      -e DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true
      -e INSTALLER_NAME=$(DebPrefix)-$(DebVersion)
      -e INSTALLER_VERSION=$(DebVersion)
      -e 'KOREBUILD_DOTNET_VERSION=$(KOREBUILD_DOTNET_VERSION)'
      -e 'KOREBUILD_DOTNET_SHARED_RUNTIME_VERSION=$(KOREBUILD_DOTNET_SHARED_RUNTIME_VERSION)'
      -e 'KOREBUILD_DOTNET_FEED_CDN=$(KOREBUILD_DOTNET_FEED_CDN)'
      -e 'KOREBUILD_DOTNET_FEED_UNCACHED=$(KOREBUILD_DOTNET_FEED_UNCACHED)'
      -e &quot;KOREBUILD_DOTNET_FEED_CREDENTIAL=$KOREBUILD_DOTNET_FEED_CREDENTIAL&quot;
      docker-image-$(Image)
      ./build.sh /t:RunDebTool"
      ContinueOnError="WarnAndContinue" />

    <!-- Copy Platform and Hosting Bundle packages to output -->
    <ItemGroup>
      <GeneratedDebFiles Include="$(_WorkOutputDir)/*.deb" />
    </ItemGroup>

    <Error Text="@(GeneratedDebFiles->Count()) deb installer files generated." Condition="'@(GeneratedDebFiles->Count())' != 1" />

    <Copy
      DestinationFiles="$(_InstallersOutputDir)$(DebPrefix)-$(DebVersion)-$(Image)-x64.deb"
      SourceFiles="@(GeneratedDebFiles)"
      OverwriteReadOnlyFiles="True"
      SkipUnchangedFiles="False"
      UseHardlinksIfPossible="False" />
  </Target>

  <Target Name="_GenerateDebOnPlatform">
    <!-- Build Docker Image -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_BuildDockerImage" Properties="Image=$(Image)" />

    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="_GenerateDeb"
      Properties="Image=$(Image);DebVersion=$(Version);DebConfig=$(PlatformDebConfigFile);DebPrefix=$(PlatformInstallerName);PlatformArchive=$(PlatformLinuxArchiveFilePath)" />
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="_GenerateDeb"
      Properties="Image=$(Image);DebVersion=$(Version);DebConfig=$(HostingDebConfigFile);DebPrefix=$(HostingInstallerName);DotnetVersion=$(CoreSetupPackageVersion)" />

    <!-- Remove Docker Image to save disk space -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_RemoveDockerImage" Properties="Image=$(Image)" />
  </Target>

  <Target Name="GenerateDebs" DependsOnTargets="_EnsureInstallerPrerequisites">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GenerateDebOnPlatform" Properties="Version=$(Version);Image=debian.8" />
    <!-- <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GenerateDebOnPlatform" Properties="Version=$(Version);Image=ubuntu.14.04" /> -->
    <!-- <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GenerateDebOnPlatform" Properties="Version=$(Version);Image=ubuntu.16.04" /> -->
  </Target>

  <Target Name="_GenerateRelabledInstaller">
    <ItemGroup>
      <Installers Include="$(_InstallersOutputDir)*$(Source)*" />
    </ItemGroup>

    <Copy
      SourceFiles="%(Installers.FullPath)"
      DestinationFiles="$([System.String]::Copy('%(Installers.FullPath)').Replace('$(Source)','$(Target)'))"
      OverwriteReadOnlyFiles="True"
      SkipUnchangedFiles="False"
      UseHardlinksIfPossible="False" />
  </Target>

  <Target Name="GenerateRelabledInstallers">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GenerateRelabledInstaller" Properties="Source=debian.8;Target=debian.9" />
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GenerateRelabledInstaller" Properties="Source=ubuntu.16.04;Target=ubuntu.17.04" />
  </Target>
</Project>
